{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","registerServiceWorker.js","index.js"],"names":["Card","_ref","name","id","email","react_default","a","createElement","className","src","concat","alt","Cardlist","robots","map","user","i","components_Card","key","Searchbox","searchChange","for","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","App","onRequestRobots","_this$props","searchfield","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Searchbox","components_Scroll","components_ErrorBoundary","components_Cardlist","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","rootreducer","combineReducers","arguments","length","undefined","action","objectSpread","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.59adc339.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({name, id, email}) => {\n\treturn (\n\t\t<div className='tc bg-washed-yellow dib br3 ma2 pa2 shadow-5 grow'>\n\t\t\t<div>\n\t\t\t\t<img src={`https://robohash.org/${id}?size=200x200`} alt='roboti'></img>\n\t\t\t</div>\n\t\t<h2>{name}</h2>\n\t\t<p>{email}</p>\t\n\t\t</div>\n\t\t);\n};\nexport default Card;","import React from 'react';\nimport Card from './Card'\n\n\nconst Cardlist = ({robots}) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((user, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t key={robots[i].id} \n\t\t\t\t\t\t id={robots[i].id} \n\t\t\t\t\t\t name={robots[i].name} \n\t\t\t\t\t\t email={robots[i].email} \n\t\t\t\t\t\t />\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n};\nexport default Cardlist;","import React from 'react';\n\n\nconst Searchbox = ({searchChange}) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t\t<label for=\"search\">\n\t\t\t<input \n\t\t\tclassName='pa3 ba b--blue bg-light-yellow' \n\t\t\ttype='search' \n\t\t\tplaceholder='Search robots...'\n\t\t\tonChange={searchChange}></input>\n\t\t\t</label>\n\t\t</div>\n\t\t);\n};\nexport default Searchbox;","import React from 'react';\n\n\nconst Scroll = (props) => {\n\treturn (\n\t<div style={{overflowY: 'scroll', border:'2px solid black', height:'680px'}}>\n\t\t{props.children}\n\t</div>\t\n\t)\n};\nexport default Scroll;","import React, {Component}Â from 'react';\n\n\nclass ErrorBoundary extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\thasError : false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info) {\n\t\tthis.setState({hasError : true})\n\t}\n\trender() {\n\t\treturn this.state.hasError ? \n\t\t<h1 className='gold tc'>Oops. That is not good</h1> : \n\t\tthis.props.children ;\n\t};\n};\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport Cardlist from '../components/Cardlist';\nimport './App.css' ;\nimport Searchbox from '../components/Searchbox';\nimport Scroll from '../components/Scroll';\nimport { connect } from 'react-redux';\nimport { setSearchfield, requestRobots } from '../actions';\nimport ErrorBoundary from '../components/ErrorBoundary'\n\nconst mapStateToProps = (state) => {\n  return {\n    searchfield: state.searchRobots.searchfield,\n    robots : state.requestRobots.robots,\n    isPending : state.requestRobots.isPending,\n    error : state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchfield(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  \n  componentDidMount() {\n    this.props.onRequestRobots()\n  };\n\n\n  render() {\n    const { searchfield, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n       return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n     })\n\n    return isPending ? \n        <h1 className='gold tc'>Loading...</h1>\n      :\n         (\n        <div className='tc'>\n       <h1 className='f1 gold grow'>Robofriends</h1>\n         <Searchbox searchChange={onSearchChange} />\n         <Scroll>\n          <ErrorBoundary>\n            <Cardlist robots={filteredRobots}/> \n          </ErrorBoundary>\n        </Scroll>\n     </div>\n    );\n\n}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { CHANGE_SEARCHFIELD, \n\t\t REQUEST_ROBOTS_PENDING,\n\t\t REQUEST_ROBOTS_SUCCESS,\n\t\t REQUEST_ROBOTS_FAILED } from './constants.js'\n\nexport const setSearchfield = (text) => ({\n\ttype: CHANGE_SEARCHFIELD,\n\tpayload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({type : REQUEST_ROBOTS_PENDING});\n\tfetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(data => dispatch({type : REQUEST_ROBOTS_SUCCESS, payload:data}))\n    .catch(error => dispatch({type : REQUEST_ROBOTS_FAILED, payload:error}));\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED= 'REQUEST_ROBOTS_FAILED';","import { CHANGE_SEARCHFIELD, \n\t\t REQUEST_ROBOTS_PENDING,\n\t\t REQUEST_ROBOTS_SUCCESS,\n\t\t REQUEST_ROBOTS_FAILED } from './constants.js'\n\nconst initialStateSearch = {\n\tsearchfield: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCHFIELD:\n\t\t\treturn { ...state, searchfield:action.payload };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n} \n\nconst initialStateRobots = {\n\tisPending: '',\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\treturn { ...state, isPending:true};\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\treturn { ...state, robots:action.payload, isPending:false};\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\treturn { ...state, error:action.payload, isPending:false};\n\t\tdefault:\n\t\treturn state;\n\n\t}\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\nimport registerServiceWorker from './registerServiceWorker';\n\nconst rootreducer = combineReducers({ searchRobots, requestRobots})\nconst logger = createLogger();\nconst store = createStore(rootreducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}